{"version":3,"sources":["webpack:///./src/lib/components/DashPdfComponents.react.js"],"names":["DashPdfComponents","enableAnnotationAPIs","embedMode","annotManager","setState","annotationManager","props","pdfRendered","console","log","fileUrl","state","documentTable","fileName","fileId","highlightsArr","viewSDKClient","ViewSDKClient","ready","then","previewFilePromise","previewFile","id","viewerConfig","apiKey","adobeViewer","getAPIs","apis","registerEventsHandler","getAnnotationManager","setAnnotationManager","length","addAnnotations","result","error","customFlags","showToolbar","showCommentsPanel","downloadWithAnnotations","printWithAnnotations","setConfig","status","newDict","Object","assign","highlightsDict","isReviewed","isCorrect","creator","newArr","setProps","key","loadPdf","undefined","selectedText","drawerOpen","label","dict","forEach","element","contractId","data","defaultTheme","updatePdfRendered","updateAnnotationReview","addAnnotation","Component","defaultProps","propTypes","PropTypes","string","currPdf","array","func"],"mappings":"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","file":"3db4f6a-main-wps-hmr.js","sourcesContent":["import React, { Component } from 'react';\nimport ViewSDKClient from '../ViewSDKClient';\nimport PropTypes from 'prop-types';\n// import \"../appStyle.css\";\nimport CustomPdfActions from \"../CustomPdfActions\";\nimport SidebarTable from \"../SidebarTable\";\nimport {defaultTheme, Provider} from '@adobe/react-spectrum';\n\n/**\n * PDF component using the Adobe Embed API. \n * Takes file url location and json annotations.\n */\nexport default class DashPdfComponents extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            annotationManager: undefined,\n            documentTable: undefined,\n            highlightsDict: undefined,\n            selectedText: \"\",\n            drawerOpen: false,\n            pdfRendered: \"\"\n        };\n    }\n\n    viewerConfig = {\n        /* Enable commenting APIs */\n        enableAnnotationAPIs: true,  /* Default value is false */\n        // includePDFAnnotations: true, // If true, annotations are saved to PDF buffer\n        embedMode: \"FULL_WINDOW\"\n    };\n\n    setAnnotationManager = annotManager => {\n        this.setState({\n            annotationManager: annotManager\n        });\n    }\n\n    loadPdf = () => {\n\n        if (this.props.pdfRendered == \"\") {\n            console.log(\"empty load\" + this.props.pdfRendered);\n            return;\n        }\n\n        ////// load the embed API script\n        // const url = \"https://documentcloud.adobe.com/view-sdk/main.js\";\n        // const script = document.createElement(\"script\");\n        // script.src = url;\n        // script.async = true;\n        // document.body.appendChild(script);\n\n        let fileUrl = this.state.documentTable[this.props.pdfRendered].fileUrl;\n        let fileName = this.state.documentTable[this.props.pdfRendered].fileName;\n        let fileId = this.props.pdfRendered;\n        let highlightsArr = this.state.documentTable[this.props.pdfRendered].highlightsArr;\n\n        const viewSDKClient = new ViewSDKClient();\n        this.state.viewSDKClient = viewSDKClient;\n        viewSDKClient.ready().then(() => {\n            /* Invoke the file preview and get the Promise object */\n            this.state.previewFilePromise = viewSDKClient.previewFile(\n                this.props.id,\n                this.viewerConfig,\n                this.props.apiKey,\n                fileUrl,\n                fileName,\n                fileId\n            );\n\n            /* Use the annotation manager interface to invoke the commenting APIs */\n            this.state.previewFilePromise.then(adobeViewer => {\n\n                adobeViewer.getAPIs().then(apis => {\n                    viewSDKClient.registerEventsHandler(apis);\n                });\n\n                adobeViewer.getAnnotationManager().then(annotManager => {\n\n                    this.setAnnotationManager(annotManager);\n                    if (highlightsArr.length != 0) {\n                        console.log(\"adding annotations\");\n                        annotManager.addAnnotations(highlightsArr)\n                        // annotManager.addAnnotationsInPDF(highlightsArr)            \n                            .then(result => {\n                                console.log(\"Success!! Annotations added\", result);\n                            })\n                            .catch(error => {\n                                console.log(error);\n                            });\n                    }\n                    /* Set UI configurations */\n                    const customFlags = {\n                        showToolbar: false,   /* Default value is true */\n                        showCommentsPanel: false,  /* Default value is true */\n                        downloadWithAnnotations: true,  /* Default value is false */\n                        printWithAnnotations: true,  /* Default value is false */\n                    };\n                    this.state.annotationManager.setConfig(customFlags);\n\n                });\n            });\n        });\n\n        console.log(\"Loading: \" + this.props.pdfRendered);\n    }\n\n    componentDidMount() {\n        this.loadPdf();\n    }\n\n    updateAnnotationReview = (id, status) => {\n        let newDict = Object.assign({}, this.state.highlightsDict);\n        newDict[id].isReviewed = true;\n        newDict[id].isCorrect = status;\n        this.setState({\n            highlightsDict: newDict\n        });\n\n        // TODO call docTable function instead\n        this.state.documentTable[this.props.pdfRendered].highlightsArr[0].creator.isCorrect = status;\n        this.state.documentTable[this.props.pdfRendered].highlightsArr[0].creator.isReviewed = true;\n    }\n\n    addAnnotation = (newArr) => {\n\n        // Add annotation \n        // index annot of pdfRendered \n        // add to document table\n\n    }\n\n    updatePdfRendered = (id) => {\n        this.props.setProps({\n            pdfRendered: id,\n            key: id\n        });\n        this.loadPdf()\n    }\n\n    setIsOpen = () => {\n        \n    }\n\n    render() {\n\n        const {\n            key,\n            id,\n            label,\n            apiKey,\n            pdfRendered,\n            documentTable\n        } = this.props;\n\n        // console.log(this.props.pdfRendered);\n        // console.log(documentTable[0].contractId);\n        // console.log(documentTable[1].data);\n\n        let dict = {};\n        documentTable.forEach(element => dict[element.contractId] = element.data);\n        this.state.documentTable = dict;\n\n        if (this.props.pdfRendered != \"\") {\n            // Create a dictionary mapping each unique annotation id to category and name\n            let highlightsDict = {};\n            let highlightsArr = this.state.documentTable[this.props.pdfRendered].highlightsArr;\n            highlightsArr.forEach(element => highlightsDict[element.id] = element.creator);\n            this.state.highlightsDict = highlightsDict;\n        }\n\n        return (\n\n            <Provider theme={defaultTheme}>\n                <div className=\"pdf-view-container\">\n                    \n                    <SidebarTable width=\"size-800\" \n                        documentTable={this.state.documentTable}\n                        updatePdfRendered={this.updatePdfRendered}\n                    />\n                    \n                    <div id={id} className=\"pdf-view full-window-div\"></div>\n                    \n                    {this.state.annotationManager &&\n                        <CustomPdfActions\n                            annotationManager={this.state.annotationManager}\n                            highlightsDict={this.state.highlightsDict}\n                            viewSDKClient={this.state.viewSDKClient}\n                            updateAnnotationReview={this.updateAnnotationReview}\n                            addAnnotation={this.addAnnotation}\n                        />\n                    }\n\n                </div>\n            </Provider>\n        );\n            \n\n    }\n\n}\n\nDashPdfComponents.defaultProps = {\n    id: \"\",\n    label: \"\",\n    apiKey: \"\",\n    pdfRendered: \"\"\n};\n\nDashPdfComponents.propTypes = {\n\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    key: PropTypes.string,\n\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * A label that will be printed when this component is rendered.\n     */\n    label: PropTypes.string,\n\n    /**\n     * Api key for authentication\n     */\n    apiKey: PropTypes.string,\n\n    /**\n     * URL to file that will be displayed\n     */\n     pdfRendered: PropTypes.string,\n\n    /**\n     * URL to file that will be displayed\n     */\n     currPdf: PropTypes.string,\n\n    /**\n     * Annotations that will appear as highlights\n     */\n     documentTable: PropTypes.array,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func,\n\n};"],"sourceRoot":""}