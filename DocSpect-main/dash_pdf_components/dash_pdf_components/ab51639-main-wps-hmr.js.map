{"version":3,"sources":["webpack:///./src/lib/components/DashPdfComponents.react.js"],"names":["DashPdfComponents","enableAnnotationAPIs","includePDFAnnotations","annotManager","setState","annotationManager","viewSDKClient","ViewSDKClient","state","ready","then","previewFilePromise","previewFile","props","id","viewerConfig","apiKey","fileUrl","fileName","fileId","adobeViewer","getAPIs","apis","registerEventsHandler","getAnnotationManager","setAnnotationManager","highlightsArr","length","addAnnotations","result","console","log","error","customFlags","showToolbar","showCommentsPanel","downloadWithAnnotations","printWithAnnotations","setConfig","status","newDict","Object","assign","highlightsDict","review","undefined","selectedText","drawerOpen","loadPdf","key","label","forEach","element","creator","updateAnnotationReview","Component","defaultProps","propTypes","PropTypes","string","array","setProps","func"],"mappings":"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","file":"ab51639-main-wps-hmr.js","sourcesContent":["import React, { Component } from 'react';\nimport ViewSDKClient from '../ViewSDKClient';\nimport PropTypes from 'prop-types';\nimport \"../appStyle.css\";\nimport CustomPdfActions from \"../CustomPdfActions\";\nimport SidebarMenu from 'react-bootstrap-sidebar-menu';\nimport SidebarTable from \"../SidebarTable\";\n\n/**\n * PDF component using the Adobe Embed API. Takes file url location and json annotations.\n */\nexport default class DashPdfComponents extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            annotationManager: undefined,\n            fileUrl: \"\",\n            highlightsArr: undefined,\n            highlightsDict: undefined,\n            selectedText: \"\",\n            drawerOpen: false\n        };\n    }\n\n    viewerConfig = {\n        /* Enable commenting APIs */\n        enableAnnotationAPIs: true,  /* Default value is false */\n        includePDFAnnotations: false // If true, annotations are saved to PDF buffer\n    };\n\n    setAnnotationManager = annotManager => {\n        this.setState({\n            annotationManager: annotManager\n        });\n    }\n\n    loadPdf = () => {\n\n        ////// load the embed API script\n        // const url = \"https://documentcloud.adobe.com/view-sdk/main.js\";\n        // const script = document.createElement(\"script\");\n        // script.src = url;\n        // script.async = true;\n        // document.body.appendChild(script);\n\n        const viewSDKClient = new ViewSDKClient();\n        this.state.viewSDKClient = viewSDKClient;\n        viewSDKClient.ready().then(() => {\n            /* Invoke the file preview and get the Promise object */\n            this.state.previewFilePromise = viewSDKClient.previewFile(\n                this.props.id,\n                this.viewerConfig,\n                this.props.apiKey,\n                this.props.fileUrl,\n                this.props.fileName,\n                this.props.fileId\n            );\n\n            /* Use the annotation manager interface to invoke the commenting APIs */\n            this.state.previewFilePromise.then(adobeViewer => {\n\n                adobeViewer.getAPIs().then(apis => {\n                    viewSDKClient.registerEventsHandler(apis);\n                });\n\n                adobeViewer.getAnnotationManager().then(annotManager => {\n\n                    this.setAnnotationManager(annotManager);\n                    if (this.state.highlightsArr.length != 0) {\n                        annotManager.addAnnotations(this.state.highlightsArr)\n                            // annotManager.addAnnotationsInPDF(this.state.highlightsArr)            \n                            .then(result => {\n                                console.log(\"Success!! Annotations added\", result);\n                            })\n                            .catch(error => {\n                                console.log(error);\n                            });\n                    }\n                    /* Set UI configurations */\n                    const customFlags = {\n                        showToolbar: false,   /* Default value is true */\n                        // dockPageControls: false, /* Default value is true */\n                        showCommentsPanel: false,  /* Default value is true */\n                        downloadWithAnnotations: true,  /* Default value is false */\n                        printWithAnnotations: true,  /* Default value is false */\n                    };\n                    this.state.annotationManager.setConfig(customFlags);\n\n                });\n            });\n        });\n    }\n\n    componentDidMount() {\n        this.loadPdf();\n    }\n\n    updateAnnotationReview = (id, status) => {\n        let newDict = Object.assign({}, this.state.highlightsDict);\n        newDict[id].review = status;\n        this.setState({\n            highlightsDict: newDict\n        });\n    }\n\n    render() {\n\n        const {\n            key,\n            id,\n            label,\n            apiKey,\n            fileUrl,\n            fileName,\n            fileId,\n            highlightsArr\n        } = this.props;\n\n        this.state.fileUrl = fileUrl;\n        this.state.highlightsArr = highlightsArr;\n\n        // Create a dictionary mapping each unique annotation id to category and name\n        let highlightsDict = {};\n        highlightsArr.forEach(element => highlightsDict[element.id] = element.creator);\n        this.state.highlightsDict = highlightsDict;\n\n        // console.log(\"got\");\n        // console.log(this.state.highlightsDict);\n\n        return (\n            <div className=\"pdf-view-container\">\n                \n                <SidebarTable />\n\n                <div id={id} className=\"pdf-view full-window-div\"></div>\n\n                {this.state.annotationManager &&\n                    <CustomPdfActions\n                        annotationManager={this.state.annotationManager}\n                        highlightsDict={this.state.highlightsDict}\n                        viewSDKClient={this.state.viewSDKClient}\n                        updateAnnotationReview={this.updateAnnotationReview}\n                    />\n                }\n\n\n            </div>\n        );\n\n    }\n\n}\n\nDashPdfComponents.defaultProps = {};\n\nDashPdfComponents.propTypes = {\n\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    key: PropTypes.string,\n\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * A label that will be printed when this component is rendered.\n     */\n    label: PropTypes.string,\n\n    /**\n     * Api key for authentication\n     */\n    apiKey: PropTypes.string,\n\n    /**\n     * URL to file that will be displayed\n     */\n    fileUrl: PropTypes.string,\n\n    /**\n     * file name\n     */\n    fileName: PropTypes.string,\n\n    /**\n    * unique file id\n    */\n    fileId: PropTypes.string,\n\n    /**\n     * Annotations that will appear as highlights\n     */\n    highlightsArr: PropTypes.array,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};"],"sourceRoot":""}