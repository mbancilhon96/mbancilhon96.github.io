{"version":3,"sources":["webpack:///./src/lib/CustomPdfActions.js"],"names":["ClauseItem","e","stopPropagation","state","inEditMode","editAnnotation","props","annotation","setState","editInputValue","bodyValue","deleteAnnotation","id","annotationManager","selectAnnotation","then","error","console","log","persist","target","value","updateAnnotation","annotationId","filter","annotationIds","deleteAnnotations","undefined","selectedAnnotationId","annot_name","creator","name","toLowerCase","clauseItemOnClick","editButtonOnClick","deleteButtonOnClick","editInputOnChange","parseInt","selector","node","index","Component","EntityItem","icon","entityItemOnClick","CustomPdfActions","annotationListItems","event","type","data","onAnnotationAdded","addCommentText","onAnnotationDeleted","toggleSelectedAnnotation","subtype","onTextAnnotationUpdated","item","findIndex","comment","registerEventListener","annotationEventListener","annotationEntityList","annotationClasueList","forEach","element","highlightsDict","category","push","map","listItem"],"mappings":"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","file":"3b99635-main-wps-hmr.js","sourcesContent":["// From code in Adobe Embed API samples:\n// https://github.com/adobe/pdf-embed-api-samples\n\nimport React, { Component } from \"react\";\nimport Accordion from 'react-bootstrap/Accordion';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { CalendarCheck, ChevronDoubleLeft, PersonCircle, ThreeDots, CurrencyDollar } from 'react-bootstrap-icons';\nimport Badge from 'react-bootstrap/Badge';\nimport Stack from 'react-bootstrap/Stack';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nclass ClauseItem extends Component {\n    constructor() {\n        super();\n        this.state = {\n            inEditMode: false,\n            editInputValue: undefined\n        };\n    }\n\n    /* Bind editAnnotation to edit button. */\n    editButtonOnClick = e => {\n        e.stopPropagation();\n        /* If in editMode */\n        if (this.state.inEditMode) {\n            this.editAnnotation(this.props.annotation);\n            /* toggle editMode */\n            this.setState({\n                inEditMode: false\n            });\n        } else {\n            /* Default input value */\n            if (!this.state.editInputValue) {\n                this.setState({\n                    editInputValue: this.props.annotation.bodyValue\n                });\n            }\n            /* toggle editMode */\n            this.setState({\n                inEditMode: true\n            });\n        }\n    };\n\n    /* Bind deleteAnnotation to delete button. */\n    deleteButtonOnClick = e => {\n        e.stopPropagation();\n        this.deleteAnnotation(this.props.annotation.id);\n    };\n\n    clauseItemOnClick = () => {\n        this.props.annotationManager.selectAnnotation(this.props.annotation.id)\n            .then(() => {})\n            .catch(error => {\n                console.log(error);\n            });\n    }\n\n    editInputOnChange = e => {\n        e.persist();\n        this.setState({\n            editInputValue: e.target.value\n        });\n    }\n\n    /* Edit an existing annotation using Annotation API and update the list item as well. */\n    editAnnotation = annotation => {\n        annotation.bodyValue = this.state.editInputValue;\n        this.props.annotationManager.updateAnnotation(annotation)\n            .then(() => {\n                console.log(\"Annotation updated successfully.\");\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    };\n\n    /* Delete an existing annotation from Annotation API (the same will be removed from list as well) */\n    deleteAnnotation = annotationId => {\n        const filter = {\n            annotationIds: [annotationId]\n        };\n        this.props.annotationManager.deleteAnnotations(filter)\n            .then(() => {\n                console.log(\"Annotation deleted successfully.\");\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    };\n\n    render() {\n        const {\n            inEditMode,\n        } = this.state;\n\n        const {\n            annotation,\n            selectedAnnotationId\n        } = this.props;\n\n        let annot_name = annotation.creator.name.toLowerCase();\n        if (annot_name == \"opt_out\" || annot_name == \"Opt_out\") {\n            annot_name = \"Opt-out\";\n        } else if (annot_name == \"terminations\" || annot_name == \"termination\") {\n            annot_name = \"Termination\";\n        } else if (annot_name == \"payments\" || annot_name == \"payment\") {\n            annot_name = \"Payment\";\n        }\n\n        return (\n        \n            <li\n                id={ annotation.id }\n                // className={ selectedAnnotationId === annotation.id ? \"selected\" : \"unselected\" }\n                className = { `${ selectedAnnotationId === annotation.id ? \"selected\" : \"unselected\" } ${ annot_name }` }\n                onClick={ this.clauseItemOnClick }\n            >\n                <Stack gap={2}>\n                    <Container className=\"stack-annotation-container\">\n                        <Row>\n                            <Col className=\"clause-label\">\n                                <div className={ `clause-label ${ annot_name.toLowerCase() }` }>\n                                <small>{annot_name}</small>\n                                </div>\n                            </Col>\n\n                            {/* <Col>\n                            <Dropdown>\n                            <Dropdown.Toggle id=\"dropdown-basic\">\n                                <span className=\"edit-icon\"><ThreeDots className=\"ml-4\" /></span>\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                                <Dropdown.Item className=\"edit\" onClick={ this.editButtonOnClick }>{ inEditMode ? \"Save\" : \"Edit\" }</Dropdown.Item>\n                                <Dropdown.Item className=\"delete\" onClick={ this.deleteButtonOnClick }>Delete</Dropdown.Item>\n                            </Dropdown.Menu>\n                            </Dropdown>\n                            </Col> */}\n                            \n                            <Col>\n                                <small>\n                                <button className=\"edit\" onClick={ this.editButtonOnClick }>{ inEditMode ? \"Save\" : \"Edit\" }</button>\n                                </small>\n                            </Col>\n\n                            <Col>\n                                <small>\n                                <button className=\"delete\" onClick={ this.deleteButtonOnClick }>Delete</button>\n                                </small>\n                            </Col>\n\n                        </Row>\n                    </Container>\n\n                    <div className=\"clause-body\">\n                        {\n                            inEditMode ?\n                                <input type=\"text\" defaultValue={ annotation.bodyValue } onChange={ this.editInputOnChange }/> :\n                                <label>{ annotation.bodyValue }</label>\n                        }\n                    </div>\n                    <div className=\"page-number\">\n                        <small>Page {parseInt(annotation.target.selector.node.index) + 1}</small>\n                    </div>\n                </Stack>\n\n            </li>\n        );\n    }\n}\n\nclass EntityItem extends Component {\n    constructor() {\n        super();\n        this.state = {\n            inEditMode: false,\n            editInputValue: undefined\n        };\n    }\n\n    /* Bind editAnnotation to edit button. */\n    editButtonOnClick = e => {\n        e.stopPropagation();\n        /* If in editMode */\n        if (this.state.inEditMode) {\n            this.editAnnotation(this.props.annotation);\n            /* toggle editMode */\n            this.setState({\n                inEditMode: false\n            });\n        } else {\n            /* Default input value */\n            if (!this.state.editInputValue) {\n                this.setState({\n                    editInputValue: this.props.annotation.bodyValue\n                });\n            }\n            /* toggle editMode */\n            this.setState({\n                inEditMode: true\n            });\n        }\n    };\n\n    /* Bind deleteAnnotation to delete button. */\n    deleteButtonOnClick = e => {\n        e.stopPropagation();\n        this.deleteAnnotation(this.props.annotation.id);\n    };\n\n    entityItemOnClick = () => {\n        this.props.annotationManager.selectAnnotation(this.props.annotation.id)\n            .then(() => {})\n            .catch(error => {\n                console.log(error);\n            });\n    }\n\n    editInputOnChange = e => {\n        e.persist();\n        this.setState({\n            editInputValue: e.target.value\n        });\n    }\n\n    /* Edit an existing annotation using Annotation API and update the list item as well. */\n    editAnnotation = annotation => {\n        annotation.bodyValue = this.state.editInputValue;\n        this.props.annotationManager.updateAnnotation(annotation)\n            .then(() => {\n                console.log(\"Annotation updated successfully.\");\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    };\n\n    /* Delete an existing annotation from Annotation API (the same will be removed from list as well) */\n    deleteAnnotation = annotationId => {\n        const filter = {\n            annotationIds: [annotationId]\n        };\n        this.props.annotationManager.deleteAnnotations(filter)\n            .then(() => {\n                console.log(\"Annotation deleted successfully.\");\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    };\n\n    render() {\n        const {\n            inEditMode,\n        } = this.state;\n\n        const {\n            annotation,\n            selectedAnnotationId\n        } = this.props;\n\n        let icon;\n        if (annotation.creator.name == \"Parties\") {\n            icon = <span className=\"entity-icon\"><PersonCircle className=\"ml-4\" /></span>\n            console.log(\"it's parties\");\n        } else if (annotation.creator.name == \"Amount\") {\n            icon = <span className=\"entity-icon\"><CurrencyDollar className=\"ml-4\" /></span>\n        }\n\n        return (\n            <li\n                id={ annotation.id }\n                // className={ selectedAnnotationId === annotation.id ? \"selected\" : \"unselected\" }\n                className = { `${ selectedAnnotationId === annotation.id ? \"selected\" : \"unselected\" } ${ (annotation.creator.name).toLowerCase() }` }\n                onClick={ this.entityItemOnClick }\n            >\n                <Stack gap={2}>\n                    <Container className=\"stack-annotation-container\">\n                        <Row>\n                            <Col className=\"entity-label\">\n                                <div className={ `entity-label ${ (annotation.creator.name).toLowerCase() }` }>\n                            \n                                    <p className=\"entity-text\">\n                                        {icon}<span>{annotation.creator.name}: {annotation.bodyValue}</span>\n                                    </p>\n                                \n                                </div>\n                            </Col>\n\n                            {/* <Col>\n                            <Dropdown>\n                            <Dropdown.Toggle id=\"dropdown-basic\">\n                                <span className=\"edit-icon\"><ThreeDots className=\"ml-4\" /></span>\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                                <Dropdown.Item className=\"edit\" onClick={ this.editButtonOnClick }>{ inEditMode ? \"Save\" : \"Edit\" }</Dropdown.Item>\n                                <Dropdown.Item className=\"delete\" onClick={ this.deleteButtonOnClick }>Delete</Dropdown.Item>\n                            </Dropdown.Menu>\n                            </Dropdown>\n                            </Col> */}\n                            \n                        </Row>\n                    </Container>\n\n                    {/* <div className=\"clause-body\">\n                        {\n                            inEditMode ?\n                                <input type=\"text\" defaultValue={ annotation.bodyValue } onChange={ this.editInputOnChange }/> :\n                                <label>{ annotation.bodyValue }</label>\n                        }\n                    </div> */}\n                    <div className=\"page-number\">\n                        <small>Page {parseInt(annotation.target.selector.node.index) + 1}</small>\n                    </div>\n                </Stack>\n\n            </li>\n        );\n    }\n}\n\nclass CustomPdfActions extends Component {\n    state = {\n        annotationListItems: [],\n        selectedAnnotationId: undefined,\n    };\n\n    componentDidMount() {\n        /* API to register events listener */\n        this.props.annotationManager.registerEventListener(this.annotationEventListener);\n    }\n\n    annotationEventListener = event => {\n        if (event.type === \"ANNOTATION_ADDED\") {\n            if (event.data.bodyValue) {\n                this.onAnnotationAdded(event.data);\n            } else {\n                this.addCommentText(event.data);\n            }\n        }\n        if (event.type === \"ANNOTATION_DELETED\") {\n            this.onAnnotationDeleted(event.data.id);\n        }\n        if (event.type === \"ANNOTATION_SELECTED\") {\n            this.toggleSelectedAnnotation(event.data.id);\n        }\n        if (event.type === \"ANNOTATION_UNSELECTED\") {\n            this.toggleSelectedAnnotation();\n        }\n        if (event.type === \"ANNOTATION_UPDATED\" && event.data.target.selector.subtype === \"freetext\") {\n            this.onTextAnnotationUpdated(event.data);\n        }\n        console.log(event);\n    }\n\n    /* This will add a new annotation list item to list maintained in state */\n    onAnnotationAdded = annotation => {\n        this.setState({\n            annotationListItems: [...this.state.annotationListItems, annotation]\n        });\n    };\n\n    /* This will delete the annotation list item from list maintained in state */\n    onAnnotationDeleted = id => {\n        this.setState({\n            annotationListItems: this.state.annotationListItems.filter(item => item.id !== id)\n        });\n    }\n\n    /* This will set/unset selected annotation id in state */\n    toggleSelectedAnnotation = id => {\n        this.setState({\n            selectedAnnotationId: id\n        });\n    }\n\n    /* This will update the text in the annotation list item when text annotation is updated from UI */\n    onTextAnnotationUpdated = annotation => {\n        var index = this.state.annotationListItems.findIndex(item => item.id === annotation.id);\n        this.state.annotationListItems[index].bodyValue = annotation.bodyValue;\n        this.setState({\n            annotationListItems: this.state.annotationListItems\n        });\n    }\n\n    addCommentText = annotation => {\n        const type = annotation.target.selector.subtype;\n        // const comment = prompt(\"Enter the text associated with \" + type, \"Added a \" + type) || \"Added a \" + type;\n        const comment = \"Added a \" + type;\n        annotation.bodyValue = comment;\n        this.props.annotationManager.updateAnnotation(annotation)\n            .then(() => {\n                console.log(\"Annotation updated successfully.\");\n                this.onAnnotationAdded(annotation);\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n\n    render() {\n        // ”category\": {clause} or {entity}\n        // “name”: {clause type} or {entity type}\n        let annotationEntityList = [];\n        let annotationClasueList = [];\n        this.state.annotationListItems.forEach((element) => {\n            // console.log({ element });\n            // console.log(this.props.highlightsDict[element.id].category)\n            if ( this.props.highlightsDict[element.id].category == \"Clause\"  ) {\n                annotationClasueList.push(element);\n            } else if ( this.props.highlightsDict[element.id].category == \"Entity\"  ) {\n                annotationEntityList.push(element);\n            }\n        });\n\n        return (\n            <div className=\"panel-container\">\n\n                <div className=\"panel-heading\">\n                    <h1 className=\"panel-heading\">Agreement Insights</h1>\n                </div>\n\n                <div className=\"panel-contents\">\n                    {/* Entitities Accordion */}\n                    <Accordion defaultActiveKey={['0']} alwaysOpen>\n                        <Accordion.Item eventKey=\"0\">\n                            <Accordion.Header><h2 className=\"accordion-header\">Key Entities</h2></Accordion.Header>\n                            <Accordion.Body>\n\n                                <ul className = \"annotations-container\">\n                                    {\n                                        // this.state.annotationListItems.map(listItem =>\n                                        annotationEntityList.map(listItem =>\n                                            <EntityItem\n                                                key={ listItem.id }\n                                                annotation={ listItem }\n                                                selectedAnnotationId={ this.state.selectedAnnotationId }\n                                                annotationManager={ this.props.annotationManager }\n                                            />\n                                        )\n                                    }\n                                </ul>\n                                {/* <div className=\"d-flex w-100 justify-content-between\">\n                                    <p>\n                                        <span className=\"entity-icon\"><CalendarCheck className=\"ml-4\" /></span>\n                                        <b>Key 1:</b> hello world\n                                    </p>\n                                </div>\n                                <div className=\"d-flex w-100 justify-content-between\">\n                                    <p>\n                                        <span className=\"entity-icon\"><PersonCircle className=\"ml-4\" /></span>\n                                        <b>Key 1:</b> hello2\n                                    </p>\n                                </div> */}\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    </Accordion>\n\n                    {/* Clauses Accordion */}\n                    <Accordion defaultActiveKey={['1']} alwaysOpen>\n                        <Accordion.Item eventKey=\"1\">\n                            <Accordion.Header><h2 className=\"accordion-header\">Key Clauses</h2></Accordion.Header>\n                            <Accordion.Body>\n\n                                <Row className=\"category-badge\">\n                                    <Col>\n                                        <Badge bg=\"opt-out\">Opt-out</Badge>{' '}\n                                    </Col>\n                                    <Col>\n                                        <Badge bg=\"termination\">Termination</Badge>{' '}\n                                    </Col>\n                                    <Col>\n                                        <Badge bg=\"payment\">Payment</Badge>{' '}\n                                    </Col>\n                                </Row>\n\n                                <ul className = \"annotations-container\">\n                                    {\n                                        // this.state.annotationListItems.map(listItem =>\n                                        annotationClasueList.map(listItem =>\n                                            <ClauseItem\n                                                key={ listItem.id }\n                                                annotation={ listItem }\n                                                selectedAnnotationId={ this.state.selectedAnnotationId }\n                                                annotationManager={ this.props.annotationManager }\n                                            />\n                                        )\n                                    }\n                                </ul>\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    </Accordion>\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default CustomPdfActions;\n"],"sourceRoot":""}