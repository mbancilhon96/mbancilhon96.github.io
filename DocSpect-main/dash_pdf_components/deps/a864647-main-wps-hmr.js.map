{"version":3,"sources":["webpack:///./src/lib/CustomPdfActions.js"],"names":["CustomPdfActions","annotationListItems","selectedAnnotationId","undefined","annotationModalVisible","annotationCategory","annotationName","event","type","data","bodyValue","onAnnotationAdded","addAnnotationText","onAnnotationDeleted","id","toggleSelectedAnnotation","target","selector","subtype","onTextAnnotationUpdated","console","log","annotation","setState","state","filter","item","index","findIndex","props","highlightsDict","currentAnnotation","category","updateAnnotationCategory","creator","name","updateAnnotationName","annotationManager","updateAnnotation","then","error","toggleAnnotationModal","value","viewSDKClient","getSelectedText","registerEventListener","annotationEventListener","annotationEntityList","annotationClasueList","uncategorizedList","forEach","element","push","onAnnotationModalExited","map","listItem","Component"],"mappings":"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","file":"a864647-main-wps-hmr.js","sourcesContent":["// From code in Adobe Embed API samples:\n// https://github.com/adobe/pdf-embed-api-samples\n\nimport React, { Component } from \"react\";\nimport Accordion from 'react-bootstrap/Accordion';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Badge from 'react-bootstrap/Badge';\nimport ClauseAnnotationItem from \"./ClauseAnnotationItem\";\nimport EntityAnnotationItem from \"./EntityAnnotationItem\";\nimport AnnotationItem from \"./AnnotationItem\";\nimport AnnotationModal from \"./AnnotationModal\";\n\nclass CustomPdfActions extends Component {\n    state = {\n        annotationListItems: [],\n        selectedAnnotationId: undefined,\n        annotationModalVisible: false,\n        annotationCategory: \"\",\n        annotationName: \"\"\n    };\n\n    componentDidMount() {\n        /* API to register events listener */\n        this.props.annotationManager.registerEventListener(this.annotationEventListener);\n    }\n\n    annotationEventListener = event => {\n        if (event.type === \"ANNOTATION_ADDED\") {\n            if (event.data.bodyValue) {\n                this.onAnnotationAdded(event.data);\n            } else {\n                this.addAnnotationText(event.data);\n            }\n        }\n        if (event.type === \"ANNOTATION_DELETED\") {\n            this.onAnnotationDeleted(event.data.id);\n        }\n        if (event.type === \"ANNOTATION_SELECTED\") {\n            this.toggleSelectedAnnotation(event.data.id);\n        }\n        if (event.type === \"ANNOTATION_UNSELECTED\") {\n            this.toggleSelectedAnnotation();\n        }\n        if (event.type === \"ANNOTATION_UPDATED\" && event.data.target.selector.subtype === \"freetext\") {\n            this.onTextAnnotationUpdated(event.data);\n        }\n        console.log(event);\n    }\n\n    /* This will add a new annotation list item to list maintained in state */\n    onAnnotationAdded = annotation => {\n        this.setState({\n            annotationListItems: [...this.state.annotationListItems, annotation]\n        });\n    };\n\n    /* This will delete the annotation list item from list maintained in state */\n    onAnnotationDeleted = id => {\n        this.setState({\n            annotationListItems: this.state.annotationListItems.filter(item => item.id !== id)\n        });\n    }\n\n    /* This will set/unset selected annotation id in state */\n    toggleSelectedAnnotation = id => {\n        this.setState({\n            selectedAnnotationId: id\n        });\n    }\n\n    /* This will update the text in the annotation list item when text annotation is updated from UI */\n    onTextAnnotationUpdated = annotation => {\n\n        console.log(\"onTextAnnotationUpdated\");\n\n        var index = this.state.annotationListItems.findIndex(item => item.id === annotation.id);\n        this.state.annotationListItems[index].bodyValue = annotation.bodyValue;\n        this.setState({\n            annotationListItems: this.state.annotationListItems\n        });\n\n    }\n\n    toggleAnnotationModal = () => {\n        this.setState((state) => ({ annotationModalVisible: !state.annotationModalVisible }));\n    };\n\n    onAnnotationModalExited = () => {\n\n        console.log(\"EXIT onAnnotationModalExited\");\n        \n        if (this.state.annotationCategory != \"\") {\n            this.props.highlightsDict[this.state.currentAnnotation.id] = \n                {\n                    category: this.state.annotationCategory,\n                };\n            this.updateAnnotationCategory(\"\");\n        } \n        if (this.state.annotationName != \"\") {\n            this.state.currentAnnotation.creator.name = this.state.annotationName;\n            this.props.highlightsDict[this.state.currentAnnotation.id].name = this.state.annotationName;\n            this.updateAnnotationName(\"\");\n        }\n\n        this.props.annotationManager.updateAnnotation(this.state.currentAnnotation)\n            .then(() => {\n                console.log(\"Annotation updated successfully.\");\n                this.onAnnotationAdded(this.state.currentAnnotation);\n            })\n            .catch(error => {\n                console.log(error);\n            });\n\n        this.toggleAnnotationModal();\n\n    }\n\n    updateAnnotationCategory = (value) => {\n        this.setState((state) => ({ annotationCategory: value }));\n    };\n\n    updateAnnotationName = (value) => {\n        this.setState((state) => ({ annotationName: value }));\n    };\n\n    addAnnotationText = annotation => {\n\n        console.log(\" addAnnotationText\");\n\n        /* Get the annotation body value */\n        annotation.bodyValue = this.props.viewSDKClient.getSelectedText()\n        // console.log(annotation);\n        this.toggleAnnotationModal();\n\n        this.setState((state) => ({ currentAnnotation: annotation }));\n\n        // const type = annotation.target.selector.subtype;\n        // const comment = prompt(\"Enter the text associated with \" + type, \"Added a \" + type) || \"Added a \" + type;\n        // const comment = \"Added a \" + type;\n        // annotation.bodyValue = comment;\n\n    }\n\n    render() {\n        // ”category\": {clause} or {entity}\n        // “name”: {clause type} or {entity type}\n\n        let annotationEntityList = [];\n        let annotationClasueList = [];\n        let uncategorizedList = [];\n        this.state.annotationListItems.forEach((element) => {\n            // console.log({ element });\n            // console.log(this.props.highlightsDict[element.id].category)\n            if (element.id in this.props.highlightsDict) {\n                if ( this.props.highlightsDict[element.id].category == \"Clause\"  ) {\n                    annotationClasueList.push(element);\n                } else if ( this.props.highlightsDict[element.id].category == \"Entity\"  ) {\n                    annotationEntityList.push(element);\n                } \n            }\n            else {\n                uncategorizedList.push(element);\n            }\n\n        });\n\n        return (\n            <div className=\"panel-container\">\n\n                {this.state.annotationModalVisible && (\n                    <AnnotationModal \n                        show={this.state.annotationModalVisible} \n                        onExited={this.onAnnotationModalExited}\n                        categoryValue={this.state.annotationCategory}\n                        toggleCategory={this.updateAnnotationCategory}\n                        nameValue={this.state.annotationName}\n                        toggleName={this.updateAnnotationName}\n                        />\n                )}\n\n\n                <div className=\"panel-heading\">\n                    <h1 className=\"panel-heading\">Agreement Insights</h1>\n                </div>\n\n                <div className=\"panel-contents\">\n                    {/* Entitities Accordion */}\n                    <Accordion defaultActiveKey={['0']} alwaysOpen>\n                        <Accordion.Item eventKey=\"0\">\n                            <Accordion.Header><h2 className=\"accordion-header\">Key Entities</h2></Accordion.Header>\n                            <Accordion.Body>\n                                <ul className = \"annotations-container\">\n                                    {\n                                        // this.state.annotationListItems.map(listItem =>\n                                        annotationEntityList.map(listItem =>\n                                            <EntityAnnotationItem\n                                                key={ listItem.id }\n                                                annotation={ listItem }\n                                                selectedAnnotationId={ this.state.selectedAnnotationId }\n                                                annotationManager={ this.props.annotationManager }\n                                            />\n                                        )\n                                    }\n                                </ul>\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    </Accordion>\n\n                    {/* Clauses Accordion */}\n                    <Accordion defaultActiveKey={['1']} alwaysOpen>\n                        <Accordion.Item eventKey=\"1\">\n                            <Accordion.Header><h2 className=\"accordion-header\">Key Clauses</h2></Accordion.Header>\n                            <Accordion.Body>\n\n                                <Row className=\"category-badge\">\n                                    <Col>\n                                        <Badge bg=\"opt-out\">Opt-out</Badge>{' '}\n                                    </Col>\n                                    <Col>\n                                        <Badge bg=\"termination\">Termination</Badge>{' '}\n                                    </Col>\n                                    <Col>\n                                        <Badge bg=\"payment\">Payment</Badge>{' '}\n                                    </Col>\n                                </Row>\n\n                                <ul className = \"annotations-container\">\n                                    {\n                                        // this.state.annotationListItems.map(listItem =>\n                                        annotationClasueList.map(listItem =>\n                                            <ClauseAnnotationItem\n                                                key={ listItem.id }\n                                                annotation={ listItem }\n                                                selectedAnnotationId={ this.state.selectedAnnotationId }\n                                                annotationManager={ this.props.annotationManager }\n                                            />\n                                        )\n                                    }\n                                </ul>\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    </Accordion>\n\n                    {/* Uncategorized Accordion */}\n                    {/* <Accordion defaultActiveKey={['1']} alwaysOpen>\n                        <Accordion.Item eventKey=\"1\">\n                            <Accordion.Header><h2 className=\"accordion-header\">Custom Annotations</h2></Accordion.Header>\n                            <Accordion.Body>\n\n                                <ul className = \"annotations-container\">\n                                    {\n                                        uncategorizedList.map(listItem =>\n                                            <AnnotationItem\n                                                key={ listItem.id }\n                                                annotation={ listItem }\n                                                selectedAnnotationId={ this.state.selectedAnnotationId }\n                                                annotationManager={ this.props.annotationManager }\n                                            />\n                                        )\n                                    }\n                                </ul>\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    </Accordion> */}\n\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default CustomPdfActions;\n"],"sourceRoot":""}