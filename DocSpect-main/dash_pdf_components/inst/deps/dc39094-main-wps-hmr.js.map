{"version":3,"sources":["webpack:///./src/lib/CustomPdfActions.js"],"names":["CustomPdfActions","annotationListItems","selectedAnnotationId","undefined","annotationModalVisible","annotationCategory","annotationName","highlightsDict","event","type","data","bodyValue","onAnnotationAdded","addAnnotationText","onAnnotationDeleted","id","toggleSelectedAnnotation","target","selector","subtype","onTextAnnotationUpdated","annotation","setState","state","filter","item","index","findIndex","props","currentAnnotation","category","isReviewed","updateAnnotationCategory","creator","name","updateAnnotationName","annotationManager","updateAnnotation","then","console","log","error","toggleAnnotationModal","value","viewSDKClient","getSelectedText","val","registerEventListener","annotationEventListener","annotationEntityList","annotationClasueList","uncategorizedList","forEach","element","isCorrect","push","map","listItem","updateAnnotationReview","Component"],"mappings":"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","file":"dc39094-main-wps-hmr.js","sourcesContent":["// From code in Adobe Embed API samples:\n// https://github.com/adobe/pdf-embed-api-samples\n\nimport React, { Component } from \"react\";\nimport Accordion from 'react-bootstrap/Accordion';\nimport EntityAnnotationItem from \"./EntityAnnotationItem\";\nimport AnnotationItem from \"./AnnotationItem\";\nimport AnnotationModal from \"./AnnotationModal\";\nimport ClauseTFCAnnotationItem from \"./ClauseTFCAnnotationItem\";\nimport ClauseAnnotationItem from \"./ClauseAnnotationItem\";\nimport AnnotationTFCModal from \"./AnnotationTFCModal\";\n\nclass CustomPdfActions extends Component {\n    state = {\n        annotationListItems: [],\n        selectedAnnotationId: undefined,\n        annotationModalVisible: false,\n        annotationCategory: \"\",\n        annotationName: \"\",\n        highlightsDict: {}\n    };\n\n    componentDidMount() {\n        /* API to register events listener */\n        this.props.annotationManager.registerEventListener(this.annotationEventListener);\n    }\n\n    annotationEventListener = event => {\n        if (event.type === \"ANNOTATION_ADDED\") {\n            if (event.data.bodyValue) {\n                this.onAnnotationAdded(event.data);\n            } else {\n                this.addAnnotationText(event.data);\n            }\n        }\n        if (event.type === \"ANNOTATION_DELETED\") {\n            this.onAnnotationDeleted(event.data.id);\n        }\n        if (event.type === \"ANNOTATION_SELECTED\") {\n            this.toggleSelectedAnnotation(event.data.id);\n        }\n        if (event.type === \"ANNOTATION_UNSELECTED\") {\n            this.toggleSelectedAnnotation();\n        }\n        if (event.type === \"ANNOTATION_UPDATED\" && event.data.target.selector.subtype === \"freetext\") {\n            this.onTextAnnotationUpdated(event.data);\n        }\n        // console.log(event);\n    }\n\n    /* This will add a new annotation list item to list maintained in state */\n    onAnnotationAdded = annotation => {\n        this.setState({\n            annotationListItems: [...this.state.annotationListItems, annotation]\n        });\n\n        // TODO\n        // call annotaiton update to update docTable \n        // this.props.addAnnotation = (newArr) \n    };\n\n    /* This will delete the annotation list item from list maintained in state */\n    onAnnotationDeleted = id => {\n        this.setState({\n            annotationListItems: this.state.annotationListItems.filter(item => item.id !== id)\n        });\n    }\n\n    /* This will set/unset selected annotation id in state */\n    toggleSelectedAnnotation = id => {\n        this.setState({\n            selectedAnnotationId: id\n        });\n    }\n\n    /* This will update the text in the annotation list item when text annotation is updated from UI */\n    onTextAnnotationUpdated = annotation => {\n\n        var index = this.state.annotationListItems.findIndex(item => item.id === annotation.id);\n        this.state.annotationListItems[index].bodyValue = annotation.bodyValue;\n        this.setState({\n            annotationListItems: this.state.annotationListItems\n        });\n\n    }\n\n    toggleAnnotationModal = () => {\n        this.setState((state) => ({ annotationModalVisible: !state.annotationModalVisible }));\n    }\n\n    onAnnotationModalExited = () => {\n\n        if (this.state.annotationCategory != \"\") {\n            this.props.highlightsDict[this.state.currentAnnotation.id] = \n                {\n                    category: this.state.annotationCategory,\n                    isReviewed: true\n                };\n            this.updateAnnotationCategory(\"\");\n        } \n        if (this.state.annotationName != \"\") {\n            this.state.currentAnnotation.creator.name = this.state.annotationName;\n            this.props.highlightsDict[this.state.currentAnnotation.id].name = this.state.annotationName;\n            this.updateAnnotationName(\"\");\n        }\n\n        this.props.annotationManager.updateAnnotation(this.state.currentAnnotation)\n            .then(() => {\n                console.log(\"Annotation updated successfully.\");\n                this.onAnnotationAdded(this.state.currentAnnotation);\n            })\n            .catch(error => {\n                console.log(error);\n            });\n\n        this.toggleAnnotationModal();\n\n    }\n\n    updateAnnotationCategory = (value) => {\n        this.setState((state) => ({ annotationCategory: value }));\n    }\n\n    updateAnnotationName = (value) => {\n        this.setState((state) => ({ annotationName: value }));\n    }\n\n    addAnnotationText = annotation => {\n\n        /* Get the annotation body value */\n        annotation.bodyValue = this.props.viewSDKClient.getSelectedText()\n\n        this.toggleAnnotationModal();\n\n        this.setState((state) => ({ currentAnnotation: annotation }));\n\n        // const type = annotation.target.selector.subtype;\n        // const comment = prompt(\"Enter the text associated with \" + type, \"Added a \" + type) || \"Added a \" + type;\n        // const comment = \"Added a \" + type;\n        // annotation.bodyValue = comment;\n\n    }\n\n    setDialog = val => {\n        console.log(val);\n    }\n\n    render() {\n\n        let annotationEntityList = [];\n        let annotationClasueList = [];\n        let uncategorizedList = [];\n\n        this.state.annotationListItems.forEach((element) => {\n            if (element.id in this.props.highlightsDict) {\n                element.creator.isReviewed = this.props.highlightsDict[element.id].isReviewed;\n                element.creator.isCorrect = this.props.highlightsDict[element.id].isCorrect;\n                element.creator.category = this.props.highlightsDict[element.id].category;\n                if ( this.props.highlightsDict[element.id].category == \"Clause\"  ) {\n                    if (this.props.highlightsDict[element.id].name == \"TFC\") {\n                        annotationClasueList.push(element);\n                    } else {\n                        uncategorizedList.push(element)\n                    }\n                    \n                } else if ( this.props.highlightsDict[element.id].category == \"Entity\"  ) {\n                    annotationEntityList.push(element);\n                } \n            }\n\n        });\n\n        console.log(this.props.highlightsDict);\n\n        return (\n            <div className=\"panel-container\">\n                \n                <div className=\"panel-heading\">\n                    <h1 className=\"panel-heading\"></h1>\n                </div>\n\n                <div className=\"panel-contents\">\n                    \n                    {/* TFC Clauses Accordion */}\n                    <Accordion defaultActiveKey={['1']} alwaysOpen>\n                        <Accordion.Item eventKey=\"1\">\n                            <Accordion.Header><h2 className=\"accordion-header\">TFC Clauses</h2></Accordion.Header>\n                            <Accordion.Body>\n                                <ul className = \"annotations-container\">\n                                    {\n                                        // this.state.annotationListItems.map(listItem =>\n                                        annotationClasueList.map(listItem =>\n                                            <ClauseTFCAnnotationItem\n                                                key={ listItem.id }\n                                                annotation={ listItem }\n                                                isReviewed = { listItem.creator.isReviewed }\n                                                isCorrect = { listItem.creator.isCorrect }\n                                                selectedAnnotationId={ this.state.selectedAnnotationId }\n                                                annotationManager={ this.props.annotationManager }\n                                                updateAnnotationReview = {this.props.updateAnnotationReview}\n                                            />\n                                        )\n                                    }\n                                </ul>\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    </Accordion>\n\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default CustomPdfActions;\n"],"sourceRoot":""}